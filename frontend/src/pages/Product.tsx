import { useEffect, useState, useRef } from "react";
import BookCard from "../components/BookCard";
import AOS from 'aos';
import 'aos/dist/aos.css';

interface Book {
Â  id: string;
Â  title: string;
Â  authors?: string[];
Â  thumbnail?: string;
Â  price?: number;
}

const genres = [
Â  { label: "All", query: "all" },
Â  { label: "Programming", query: "programming" },
Â  { label: "Fiction", query: "fiction" },
Â  { label: "Science", query: "science" },
Â  { label: "Business", query: "business" },
Â  { label: "Education", query: "education" },
Â  { label: "Classic", query: "classic" },
Â  { label: "Novel", query: "novel" }
];

export default function Product() {
Â  const [books, setBooks] = useState<Book[]>([]);
Â  const [search, setSearch] = useState("");
Â  const [genre, setGenre] = useState("all");
Â  const [loading, setLoading] = useState(false);
Â  const [page, setPage] = useState(1);
Â  const [suggestions, setSuggestions] = useState<Book[]>([]);
Â  const [showSuggestions, setShowSuggestions] = useState(false);
Â  const maxResults = 10;

Â  const searchRef = useRef<HTMLDivElement>(null);

Â  useEffect(() => {
Â  Â  AOS.init({
Â  Â  Â  duration: 800,
Â  Â  Â  once: true,
Â  Â  });
Â  }, []);

Â  const fetchBooks = (query: string, selectedGenre: string, pageNumber: number) => {
Â  Â  setLoading(true);
Â  Â  const startIndex = (pageNumber - 1) * maxResults;

Â  Â  fetch(
Â  Â  Â  `${import.meta.env.VITE_REACT_APP_BACKEND_BASEURL}/books?q=${encodeURIComponent(query)}&genre=${selectedGenre}&startIndex=${startIndex}&maxResults=${maxResults}`
Â  Â  )
Â  Â  Â  .then((res) => res.json())
Â  Â  Â  .then((data) => {
Â  Â  Â  Â  const items = data.items?.map((item: any) => ({
Â  Â  Â  Â  Â  id: item.id,
Â  Â  Â  Â  Â  title: item.volumeInfo.title,
Â  Â  Â  Â  Â  authors: item.volumeInfo.authors,
Â  Â  Â  Â  Â  thumbnail: item.volumeInfo.imageLinks?.thumbnail,
Â  Â  Â  Â  Â  price: Math.floor(Math.random() * (300000 - 50000 + 1) + 50000),
Â  Â  Â  Â  }));
Â  Â  Â  Â  setBooks(items || []);
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  })
Â  Â  Â  .catch(() => setLoading(false));
Â  };

Â  const fetchSuggestions = (query: string) => {
Â  Â  if (!query.trim()) {
Â  Â  Â  setSuggestions([]);
Â  Â  Â  return;
Â  Â  }
Â  Â  fetch(`${import.meta.env.VITE_REACT_APP_BACKEND_BASEURL}/books?q=${encodeURIComponent(query)}`)
Â  Â  Â  .then((res) => res.json())
Â  Â  Â  .then((data) => {
Â  Â  Â  Â  const items = data.items?.slice(0, 5).map((item: any) => ({
Â  Â  Â  Â  Â  id: item.id,
Â  Â  Â  Â  Â  title: item.volumeInfo.title,
Â  Â  Â  Â  Â  authors: item.volumeInfo.authors,
Â  Â  Â  Â  }));
Â  Â  Â  Â  setSuggestions(items || []);
Â  Â  Â  });
Â  };

Â  useEffect(() => {
Â  Â  fetchBooks(search || "book", genre, page);
Â  }, [genre, page]);

Â  const handleSearch = (e: React.FormEvent) => {
Â  Â  e.preventDefault();
Â  Â  if (search.trim() !== "") {
Â  Â  Â  setPage(1);
Â  Â  Â  fetchBooks(search, genre, 1);
Â  Â  Â  setShowSuggestions(false);
Â  Â  }
Â  };

Â  useEffect(() => {
Â  Â  const handleClickOutside = (event: MouseEvent) => {
Â  Â  Â  if (
Â  Â  Â  Â  searchRef.current &&
Â  Â  Â  Â  !searchRef.current.contains(event.target as Node)
Â  Â  Â  ) {
Â  Â  Â  Â  setShowSuggestions(false);
Â  Â  Â  }
Â  Â  };
Â  Â  document.addEventListener("mousedown", handleClickOutside);
Â  Â  return () => {
Â  Â  Â  document.removeEventListener("mousedown", handleClickOutside);
Â  Â  };
Â  }, []);

Â  const renderSkeleton = () => (
Â  Â  <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-6">
Â  Â  Â  {Array.from({ length: maxResults }).map((_, i) => (
Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  key={i}
Â  Â  Â  Â  Â  className="relative rounded-xl shadow-md p-4 flex flex-col bg-white animate-pulse"
Â  Â  Â  Â  Â  data-aos="fade-up"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <div className="mb-3 w-full h-40 md:h-60 bg-gray-300 rounded-lg"></div>
Â  Â  Â  Â  Â  <div className="bg-gray-300 h-4 w-3/4 rounded mb-2"></div>
Â  Â  Â  Â  Â  <div className="bg-gray-300 h-3 w-1/2 rounded mb-2"></div>
Â  Â  Â  Â  Â  <div className="bg-gray-300 h-4 w-1/3 rounded mt-2"></div>
Â  Â  Â  Â  Â  <div className="flex gap-2 mt-4">
Â  Â  Â  Â  Â  Â  <div className="flex-1 py-2 rounded-lg bg-gray-300"></div>
Â  Â  Â  Â  Â  Â  <div className="flex-1 py-2 rounded-lg bg-gray-300"></div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  ))}
Â  Â  </div>
Â  );

Â  return (
Â  Â  <div className="p-6 max-w-7xl mx-auto my-10 min-h-screen mt-25">
Â  Â  Â  <h1 className="text-3xl font-bold mb-6 text-[#2B2C2D]">
Â  Â  Â  Â  ðŸ“š Product List
Â  Â  Â  </h1>

Â  Â  Â  <div className="flex flex-col sm:flex-row items-center justify-between mb-6 gap-4">
Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  <label htmlFor="genre-select" className="text-lg text-[#2B2C2D] font-semibold">Genre:</label>
Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  id="genre-select"
Â  Â  Â  Â  Â  Â  value={genre}
Â  Â  Â  Â  Â  Â  onChange={(e) => {
Â  Â  Â  Â  Â  Â  Â  setGenre(e.target.value);
Â  Â  Â  Â  Â  Â  Â  setPage(1);
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  className="px-4 py-2 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-[#B58B5C] transition-all duration-200 cursor-pointer text-[#2B2C2D] font-medium"
Â  Â  Â  Â  Â  Â  style={{ borderColor: "#A9A9A9" }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {genres.map((g) => (
Â  Â  Â  Â  Â  Â  Â  <option key={g.query} value={g.query}>
Â  Â  Â  Â  Â  Â  Â  Â  {g.label}
Â  Â  Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="relative w-full sm:w-1/2" ref={searchRef}>
Â  Â  Â  Â  Â  <form onSubmit={handleSearch}>
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  placeholder="Cari buku berdasarkan judul atau penulis..."
Â  Â  Â  Â  Â  Â  Â  value={search}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => {
Â  Â  Â  Â  Â  Â  Â  Â  setSearch(e.target.value);
Â  Â  Â  Â  Â  Â  Â  Â  fetchSuggestions(e.target.value);
Â  Â  Â  Â  Â  Â  Â  Â  setShowSuggestions(true);
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  onFocus={() => {
Â  Â  Â  Â  Â  Â  Â  Â  if (suggestions.length > 0) setShowSuggestions(true);
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  className="border border-[#A9A9A9] rounded-lg px-4 py-2 w-full focus:outline-none focus:ring-2 focus:ring-[#B58B5C] transition-all duration-200"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  {search.trim() && (
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  Â  Â  className="absolute right-0 top-0 h-full px-4 rounded-r-lg bg-[#B58B5C] text-white hover:bg-[#a17a50] transition-colors"
Â  Â  Â  Â  Â  Â  Â  Â  aria-label="Search"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <svg
Â  Â  Â  Â  Â  Â  Â  Â  Â  xmlns="http://www.w3.org/2000/svg"
Â  Â  Â  Â  Â  Â  Â  Â  Â  fill="none"
Â  Â  Â  Â  Â  Â  Â  Â  Â  viewBox="0 0 24 24"
Â  Â  Â  Â  Â  Â  Â  Â  Â  strokeWidth={2}
Â  Â  Â  Â  Â  Â  Â  Â  Â  stroke="currentColor"
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-5 h-5"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <path
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  strokeLinecap="round"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  strokeLinejoin="round"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </svg>
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  {showSuggestions && suggestions.length > 0 && (
Â  Â  Â  Â  Â  Â  <div className="absolute top-full bg-white border border-[#A9A9A9] rounded-lg shadow-lg mt-2 w-full z-10 max-h-60 overflow-y-auto">
Â  Â  Â  Â  Â  Â  Â  {suggestions.map((s) => (
Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  key={s.id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setSearch(s.title);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setShowSuggestions(false);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  fetchBooks(s.title, genre, 1);
Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-4 py-3 hover:bg-gray-100 cursor-pointer transition-colors"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm font-medium text-[#2B2C2D]">{s.title}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {s.authors && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs text-gray-500">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  by {s.authors.join(", ")}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {loading && renderSkeleton()}

Â  Â  Â  {!loading && books.length > 0 && (
Â  Â  Â  Â  <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-6">
Â  Â  Â  Â  Â  {books.map((book) => (
Â  Â  Â  Â  Â  Â  <BookCard
Â  Â  Â  Â  Â  Â  Â  key={book.id}
Â  Â  Â  Â  Â  Â  Â  id={book.id}
Â  Â  Â  Â  Â  Â  Â  title={book.title}
Â  Â  Â  Â  Â  Â  Â  authors={book.authors}
Â  Â  Â  Â  Â  Â  Â  thumbnail={book.thumbnail}
Â  Â  Â  Â  Â  Â  Â  price={book.price}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  {/* Empty State */}
Â  Â  Â  {!loading && books.length === 0 && (
Â  Â  Â  Â  <p className="text-center text-[#A9A9A9]">
Â  Â  Â  Â  Â  Tidak ada buku ditemukan.
Â  Â  Â  Â  </p>
Â  Â  Â  )}

Â  Â  Â  {/* Pagination */}
Â  Â  Â  <div className="flex justify-center gap-2 mt-8">
Â  Â  Â  Â  {Array.from({ length: 3 }).map((_, i) => (
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  key={i}
Â  Â  Â  Â  Â  Â  onClick={() => setPage(i + 1)}
Â  Â  Â  Â  Â  Â  className={`px-4 py-2 rounded-lg border transition-all duration-200 font-semibold ${
Â  Â  Â  Â  Â  Â  Â  page === i + 1
Â  Â  Â  Â  Â  Â  Â  Â  ? "bg-[#00758F] text-white border-[#00758F] shadow-md"
Â  Â  Â  Â  Â  Â  Â  Â  : "bg-[#FFFFFF] text-[#2B2C2D] border-[#A9A9A9] hover:bg-gray-100"
Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {i + 1}
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  ))}
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}
